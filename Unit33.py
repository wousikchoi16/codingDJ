#Unit33 클로저 사용하기 
# 클로저는 함수를 둘러싼 환경을 유지했다가 나중에 다시 사용하는 함수

# 33.1 변수의 사용 범위 알아보기 
# 1) 전역 변수(global variable): global x
#   -> global키워드를 사용하면 무조건 전역 변수를 사용하게 됨 

# 2) 지역 변수(local variable): 지역범위
#   a) 바깥쪽 함수의 지역변수는 그 안에 속한 모든 함수에서 접근할 수 있습니다. 
#   b) 바깥쪽 함수의 지역변수를 안쪽 함수에서 변경한다면, 
#       (보이는 것은 같은 이름이지만) 안쪽 함수에서 새로 지역변수를 만들었기 때문에, 바깥쪽 함수의 지역변수는 변화없음.
#       즉, 함수 안에서 변수를 만들면, 항상 현재 함수의 지역 변수가 됩니다. 
#   c) 함수 바깥쪽에 있는 지역변수값을 변경하려면, nonlocal 키워드를 사용해야 함. nonlocal x 
#       - nonlocal은 현재 함수의 지역변수가 아니라는 뜻이며, 바깥쪽 함수의 (가장 가까운) 지역 변수를 사용합니다. 
x = 10 
print(locals())
def foo():
    x = 10
    print(locals())
foo()

#   -> 실제 코드작성시에는 명확하게 다른 이름으로 사용하는 것이 중요함. 
#   -> 함수에서 값을 주고 받을 때는 매개변수와 반환값을 사용하는 것이 좋음.
#   -> 전역변수는 가급적 사용하지 않는 것을 권장함. 

# 33.3 클로저 사용하기 
def calc():
    a = 3
    b = 5
    def mul_add(x):
        return a*x+b
    return mul_add # 함수자체를 반환!!! 함수반환할때는 함수 이름만 반환해야하며 ()를 붙이면 안됨. 
c = calc() # c에는 calc함수의 반환값인 "함수mul_add"가 들어간다
print(c(1),c(2),c(3),c(4),c(5)) # c(1)은 mul_add(1)와 같다. 
# 함수calc가 끝났는데도 c계산에서 calc의 지역변수a,b를 사용해서 계산을 하고 있습니다. 
# 이렇게 함수를 둘러싼 환경을 계속 유지하다가 
# 함수를 호출할때 다시 꺼내서 사용하는 함수를 "클로져(closure)"라고 함.
# c에 저장된 함수가 클로져입니다. 
# 클로져를 사용하면 프로그램의 흐름을 변수에 저장할 수 있습니다. 
# 즉, 클로져는 지역변수와 코드를 묶어서 사용하고 싶을 때 활용합니다. 
# 또한, 클로저에 속한 지역변수는 바깥에서 직접 접근할 수 없으므로 데이터를 숨기고 싶을때 활용합니다. 

# 33.3.1 lambda로 클로저만들기: 람다를 사용하면 표현식자체를 간단히 만들 수 있음. 
def calc():
    a = 3
    b = 5 
    return lambda x: a*x+b
c = calc()
print(c(1),c(2),c(3),c(4),c(5))

# 33.5 연습문제: 호출 횟수를 세는 함수 만들기 
def counter():
    i = 0 
    def count():
        nonlocal i 
        i = i + 1
        return i
    return count

c = counter()
for i in range(10):
    print(c(), end= ' ')