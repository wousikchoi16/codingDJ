# Unit41 코루틴 사용하기
# 코루틴(coroutine) = cooperative routine (서로 협력하는 루틴)
# 메인루틴과 서브루틴처럼 종속된 관계가 아니라 서로 대등한 관계이며 특정 시점에 상대방의 코드를 실행합니다. 
# 메인루틴과 코루틴 두가지 모두 내용을 계속 유지함
# 일반 함수를 호출하면 코드를 한번만 실행할 수 있지만, 코루틴은 코드를 여러번 실행할 수 있습니다. 
# 참고로 함수의 코드를 실행하는 지점을 진입점(entry point)이라고 하는데, 코루틴은 진입점이 여러 개인 함수입니다. 

# 1) 코루틴에 값 보내기: 코루틴객체.send(값)  변수=(yield)
#   - next(코루틴객체): 코루틴 안의 코드를 최초로 실행하여 yield까지 코드를 실행 -> 이후에 코루틴객체.sned(값)을 이용해서 보냄
#   - 코루틴객체.send(None): send메서드에 None을 지정해도 코루틴의 코드를 최초로 실행할 수 있습니다. -> 이후에 코루틴객체.sned(값)을 이용해서 보냄
#   - 코루틴은 제너레이터의 특별한 형태. 
#   - 제너레이터는 yield로 값을 발생시켰지만, 코루틴은 yield값을 받아올 수 있다. 
#   예시) next함수로 코루틴의 코드를 최초로 실행/ send() -> send메서드로 코루틴에 값을 보내면 대기하던 코루틴을 실행한다는 점
def number_coroutine():
    while True:
        x = (yield) #코루틴받기 
        print(x)
co = number_coroutine()
next(co)   # 코루틴안의 코드를 최초로 실행
co.send(1) # 코루틴으로 값보내기 
co.send(2)
co.send(3) # 코루틴으로 값받기

# 2) 코루틴 바깥으로 값을 전달하기: 변수=(yield 변수) 변수=next(코루틴객체) 변수=코루틴객체.send(값)
#   - 제너레이터는 next함수(__next__메서드)를 반복 호출하여 값을 얻어내는 방식 
#   - 코루틴은 next함수(__next__메서드)를 한번만 호출한 뒤 send로 값을 주고받는 방식 

# 3) 코루틴을 종료하고 예외 처리하기: 코루틴객체.close()
#   a) GeneratorExit예외 처리하기: 코루틴객체에서 close매서드를 호출하면 코루틴이 종료될때 GeneratorExit예외가 발생. 따라서 이 예외처리함. 
#   b) 코루틴안에 예외 발생시키기: 코루틴객체.throw(예외이름,에러메세지) -> try~except구문으로 예외처리. 

# 4) 하위코루틴의 반환값 가져오기: 변수=yield from 코루틴()
#   - 코루틴의 "return 값"을 반환하여 변수에 넣는다. 
#   - *코루틴도 제너레이터이므로 return을 사용하면 StopIteration이 발생합니다. 그래서 코루틴에서 return값은 raise StopIterartion(값)처럼 사용할 수도 있습니다.

#  정리
#   - 코루틴은 함수가 종료되지 않은 상태에서 값을 주고 받을 수 있는 함수이며, 이과정에서 현재 코드의 실행을 대기하고 상대방의 코드를 실행한다는 점이 중요함.
#   - 보통 코루틴은 시간이 오래걸리는 작업을 분할하여 처리할 때 사용하는데 주로 파일처리, 네트워크 처리 등에 활용합니다. 
