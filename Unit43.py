# Unit43 정규표현식 사용하기 
# 정규표현식(regular expression)은 일정한 규칙(패턴)을 가진 문자열을 표현하는 방법입니다. 
import re

# 1) 문자열 판단하기 
# 정규표현식은 re모듈을 가져와서 사용하며, match함수에 정규표현식 패턴과 판단할 문자열을 넣는다
# re.match('패턴', '문자열')
# - 문자열이 있으면 매치객체(SRE_Match)가 반환되고, 없으면 아무것도 반환되지 않습니다. find()로도 가능
#   a) 문자열이 맨 앞에 오는지 맨뒤에 오는지 판단하기 
#   - re.search('패턴','문자열')
#   - ^문자열 : 문자열이 맨 앞에 오는지 판단
#   - 문자열$ : 문자열이 맨 뒤에 오는지 판단    
#   - re.search('^Hello', 'Hello, world!')
#   b) 지정된 문자열이 하나라도 포함되는지 판단하기
#   - re.match('패턴','문자열')
#   - 문자열|문자열|문자열 

# 2) 범위 판단하기
# - 문자열이 숫자로 되어있는지 판단: []대괄호안에 숫자 범위를 넣는다 
# - [0-9]* 0개이상있는지, [0-9]+ 1개이상있는지
print(re.match('a*b','b'))
print(re.match('a+b','b'))
print(re.match('[0-9]','123'))
#   a) 문자가 한 개만 있는지 판단하기 
#   - 문자? : ?앞의 문자(범위)가 0개 또는 1개인지 판단
#   - [0-9]?
#   - . : .이 있는 위치에 아무문자(숫자)가 1개 있는지 판단
print(re.match('abc?d', 'abd'))
print(re.match('ab[0-9]?c', 'ab3c'))
print(re.match('ab.d', 'abxd'))
#   b) 문자 개수 판단하기 
#   - 문자{개수}
#   - (문자열){개수}
#   - [0-9]{개수}
#   - (문자){시작개수,끝개수}
#   - (문자열){시작개수,끝개수}
#   - [0-9]{시작개수,끝개수}
print(re.match('h{3}', 'hhhello'))
print(re.match('(hello){3}', 'hellohellohelloworld'))
print(re.match('[0-9]{3}-[0-9]{4}-[0-9]{4}', '010-5587-3548'))
print(re.match('[0-9]{3}-[0-9]{4}-[0-9]{4}', '010-5588-354'))

#   c) 숫자와 영문 문자를 조합해서 판단하기 
#   - a-z  A-Z  가-힣
print(re.match('[a-zA-Z0-9]+', 'Hello1234'))
print(re.match('[A-Z0-9]+', 'hello'))
print(re.match('[가-힣]+', '홍길동'))
