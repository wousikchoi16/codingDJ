# Unit43 정규표현식 사용하기 
# 정규표현식(regular expression)은 일정한 규칙(패턴)을 가진 문자열을 표현하는 방법입니다. 
import re

# 1) 문자열 판단하기 
# 정규표현식은 re모듈을 가져와서 사용하며, match함수에 정규표현식 패턴과 판단할 문자열을 넣는다
# re.match('패턴', '문자열')
# - 문자열이 있으면 매치객체(SRE_Match)가 반환되고, 없으면 아무것도 반환되지 않습니다. find()로도 가능
#   a) 문자열이 맨 앞에 오는지 맨뒤에 오는지 판단하기 
#   - re.search('패턴','문자열')
#   - ^문자열 : 문자열이 맨 앞에 오는지 판단
#   - 문자열$ : 문자열이 맨 뒤에 오는지 판단    
#   - re.search('^Hello', 'Hello, world!')
#   b) 지정된 문자열이 하나라도 포함되는지 판단하기
#   - re.match('패턴','문자열')
#   - 문자열|문자열|문자열 

# 2) 범위 판단하기
# - 문자열이 숫자로 되어있는지 판단: []대괄호안에 숫자 범위를 넣는다 
# - [0-9]* 0개이상있는지, [0-9]+ 1개이상있는지
print(re.match('a*b','b'))
print(re.match('a+b','b'))
print(re.match('[0-9]','123'))
#   a) 문자가 한 개만 있는지 판단하기 
#   - 문자? : ?앞의 문자(범위)가 0개 또는 1개인지 판단
#   - [0-9]?
#   - . : .이 있는 위치에 아무문자(숫자)가 1개 있는지 판단
print(re.match('abc?d', 'abd'))
print(re.match('ab[0-9]?c', 'ab3c'))
print(re.match('ab.d', 'abxd'))
#   b) 문자 개수 판단하기 
#   - 문자{개수}
#   - (문자열){개수}
#   - [0-9]{개수}
#   - (문자){시작개수,끝개수}
#   - (문자열){시작개수,끝개수}
#   - [0-9]{시작개수,끝개수}
print(re.match('h{3}', 'hhhello'))
print(re.match('(hello){3}', 'hellohellohelloworld'))
print(re.match('[0-9]{3}-[0-9]{4}-[0-9]{4}', '010-5587-3548'))
print(re.match('[0-9]{3}-[0-9]{4}-[0-9]{4}', '010-5588-354'))
#   c) 숫자와 영문 문자를 조합해서 판단하기 
#   - a-z  A-Z  가-힣
print(re.match('[a-zA-Z0-9]+', 'Hello1234'))
print(re.match('[A-Z0-9]+', 'hello'))
print(re.match('[가-힣]+', '홍길동'))
#   d) 특정문자 범위에 포함되지 않는지 판단하기:  [^범위]* [^범위]+ 
#   - 특정문자열로 시작하는지 판단할 때: ^[범위]*  ^[범위]+
#   - 참고)특정문자열로 끝나는지 판단할 때: [범위]*$  [범위]+$
#   - 특정문자열로 시작: ^[A-Z]+
#   - 특정문자열를 제외: [^A-Z]+
print(re.match('[^A-Z]+', 'Hello'))
print(re.match('[^A-Z]+', 'hello'))
print(re.search('^[A-Z]+', 'Hello'))
print(re.search('[0-9]+$', 'Hello123'))
#   e) 특수문자 판단하기: \특수문자
#   - 단, []대괄호 안에서는 \를 붙이지 않아도 되지만 에러가 발생하는 경우에는 \를 붙입니다. 
print(re.search('\*+', '1**2'))
print(re.match('[$()a-zA-Z0-9]+', '$(document)'))
#   -> 단순히 숫자인지 문자인지 판단할 때는 \d(모든숫자), \D, \w, \W 를 사용
#   - \d: [0-9]
#   - \D: [^0-9]
#   - \w: [a-zA-Z0-9]
#   - \W: [^a-zA-Z0-9]
#   f) 공백처리하기
#   - 공백은 ' '처럼 공백 문자를 넣어도 되고, \s \S로 표현할 수도 있습니다. 
print(re.match('[a-zA-Z0-9 ]+', 'Hello 1234'))
print(re.match('[a-zA-Z0-9\s]+', 'Hello 1234'))

#   g) 같은 정규표현식 패턴을 자주 사용할때
#   - 매번 match나 search함수에 정규표현식 패턴을 지정하는 방법은 비효율적입니다. 
#   - 같은 패턴을 자주 사용할 때는 compile함수를 사용하여 정규표현식 패턴을 객체로 만든 뒤 match또는 search메서드를 호출하면 됩니다. 
#   예시)
#   객체=re.compile('패턴')
#   객체.match('문자열')
#   객체.search('문자열')

# 3) 그룹사용하기 
#   - 정규표현식을 그룹으로 묶는 방법을 알아보겠습니다. 
#   - 패턴 안에서 정규표현식 ()괄호로 묶으면 그룹이 됩니다. 
#   -> (정규표현식) (정규표현식)
#   - 공백으로 구분된 숫자를 두 그룹으로 나누어서 찾은뒤 각 그룹에 해당하는 문자열(숫자)을 가져옵니다
#   -> 매치객체.group(그룹숫자) 
#   - groups메서드는 각 그륩에 해당하는 문자열을 튜플로 반환합니다 
#   -> 매치객체.groups()
#   - 그룹개수가 많아지면 숫자로 그룹을 구분하기가 힘들어집니다. 이때는 그룹에 이름을 지으면 편리함. 
#   -> (?P<이름>정규표현식) : 그룹이름은 ()괄호안에 ?P<이름>형식으로 지정합니다. 
#   -> 추가(p.649-650)
m = re.match('([0-9]+) ([0-9]+)', '10 295')
print(m.group(1))
print(m.group(2))
print(m.group())
print(m.group(0))
print(m.groups())

# 4) 문자열 바꾸기 
# - 정규표현식으로 특정 문자열을 찾은 뒤 다른 문자열로 바꾸는 방법을 알아보겠습니다. 
# - re.sub('패턴','바꿀문자열','문자열',바꿀횟수)
print(re.sub('apple|orange', 'fruit','apple box orange tree'))
print(re.sub('[0-9]+', 'n', '1 2 Fizz 4 Buzz Fizz 7 8'))
#   a) sub함수의 바꿀문자열 대신 '교체함수'를 지정 
#   예시)
#   교체함수(매치객체)
#   re.sub('패턴',교체함수,'문자열', 바꿀회수)
def multiple10(m):
    n = int(m.group())
    print(m.group())
    return str(n*10)
print(re.sub('[0-9]+', multiple10, '1 2 Fizz 4 Buzz Fizz 7 8',1))
#   b) 찾은 문자열을 결과에 다시 사용하기: \\숫자 
print(re.sub('([a-z]+) ([0-9]+)', '\\2 \\1 \\2 \\1', 'hello 1234'))